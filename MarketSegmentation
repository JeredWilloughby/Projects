import pandas as pd
import numpy as np
from sklearn.preprocessing import LabelEncoder, StandardScaler
from sklearn.cluster import DBSCAN
from sklearn.neighbors import NearestNeighbors
import matplotlib.pyplot as plt

def generate_synthetic_data(n_samples=1000):
    """Generate a synthetic dataset for market segmentation."""
    # Generate numerical data
    age = np.random.randint(18, 70, n_samples)
    income = np.random.randint(30000, 100000, n_samples)
    spending_score = np.random.randint(1, 100, n_samples)
    purchase_frequency = np.random.randint(1, 30, n_samples)

    # Generate categorical data
    employment_status = np.random.choice(['Employed', 'Unemployed', 'Self-Employed'], n_samples)
    education_level = np.random.choice(['High School', 'Bachelor', 'Master', 'PhD'], n_samples)
    marital_status = np.random.choice(['Single', 'Married', 'Divorced'], n_samples)

    # Create DataFrame
    data = pd.DataFrame({
        'Age': age,
        'Income': income,
        'Spending Score': spending_score,
        'Purchase Frequency': purchase_frequency,
        'Employment Status': employment_status,
        'Education Level': education_level,
        'Marital Status': marital_status
    })
    return data

def encode_and_scale_data(data):
    """Encode categorical features and scale data."""
    label_encoders = {}
    for column in ['Employment Status', 'Education Level', 'Marital Status']:
        le = LabelEncoder()
        data[column] = le.fit_transform(data[column])
        label_encoders[column] = le

    scaler = StandardScaler()
    scaled_data = scaler.fit_transform(data)
    return scaled_data

def estimate_eps(scaled_data):
    """Estimate the eps parameter for DBSCAN using the Nearest Neighbors approach."""
    nearest_neighbors = NearestNeighbors(n_neighbors=5)
    nearest_neighbors.fit(scaled_data)
    distances, indices = nearest_neighbors.kneighbors(scaled_data)

    # Sort and plot distances
    sorted_distances = np.sort(distances[:, 4])
    plt.figure(figsize=(10, 5))
    plt.plot(sorted_distances)
    plt.xlabel('Points')
    plt.ylabel('Distance')
    plt.title('Sorted Distances to 5th Nearest Neighbor')
    plt.grid(True)
    plt.show()

def apply_dbscan(scaled_data, eps, min_samples):
    """Apply DBSCAN clustering algorithm."""
    dbscan = DBSCAN(eps=eps, min_samples=min_samples)
    clusters = dbscan.fit_predict(scaled_data)
    return clusters

# Usage
data = generate_synthetic_data()
scaled_data = encode_and_scale_data(data)
estimate_eps(scaled_data)  # Plot to estimate eps
clusters = apply_dbscan(scaled_data, eps=2, min_samples=5)  # Adjust eps and min_samples as needed
data['Cluster'] = clusters

