import pandas as pd
import numpy as np
from scipy.stats import chi2_contingency, f_oneway, skew, kurtosis
from sklearn.feature_selection import mutual_info_classif, mutual_info_regression
from sklearn.ensemble import RandomForestClassifier, RandomForestRegressor
from sklearn.preprocessing import StandardScaler, LabelEncoder
import matplotlib.pyplot as plt
import seaborn as sns

class FeatureSelector:
    def __init__(self, df, target, problem_type='classification'):
        self.df = df
        self.target = target
        self.problem_type = problem_type
        self.results = {}

    def preprocess(self):
        for column in self.df.columns:
            if self.df[column].dtype == 'object':
                self.df[column].fillna(self.df[column].mode()[0], inplace=True)
                le = LabelEncoder()
                self.df[column] = le.fit_transform(self.df[column])
            else:
                self.df[column].fillna(self.df[column].mean(), inplace=True)

    def descriptive_statistics(self):
        stats = self.df.describe(include='all').transpose()
        additional_stats = self.df.apply(lambda x: pd.Series({
            'skewness': skew(x.dropna()),
            'kurtosis': kurtosis(x.dropna()),
            'missing_values': x.isnull().sum()
        })).transpose()
        descriptive_stats = pd.concat([stats, additional_stats], axis=1)
        self.results['descriptive_statistics'] = descriptive_stats

        print("Descriptive Statistics:")
        print(descriptive_stats)

    def correlation_analysis(self):
        corr = self.df.corr()
        self.results['correlation'] = corr
        plt.figure(figsize=(12, 8))
        sns.heatmap(corr, annot=True, fmt='.2f', cmap='coolwarm')
        plt.title('Correlation Matrix')
        plt.show()

    def feature_importance(self):
        X = self.df.drop(columns=[self.target])
        y = self.df[self.target]
        if self.problem_type == 'classification':
            model = RandomForestClassifier(random_state=42)
            model.fit(X, y)
            importance = model.feature_importances_
        else:
            model = RandomForestRegressor(random_state=42)
            model.fit(X, y)
            importance = model.feature_importances_
        
        importance_df = pd.DataFrame({'Feature': X.columns, 'Importance': importance})
        importance_df.sort_values(by='Importance', ascending=False, inplace=True)
        self.results['feature_importance'] = importance_df
        
        plt.figure(figsize=(12, 8))
        sns.barplot(data=importance_df, x='Importance', y='Feature')
        plt.title('Feature Importance')
        plt.show()

    def mutual_info(self):
        X = self.df.drop(columns=[self.target])
        y = self.df[self.target]
        if self.problem_type == 'classification':
            mi = mutual_info_classif(X, y, random_state=42)
        else:
            mi = mutual_info_regression(X, y, random_state=42)
        
        mi_df = pd.DataFrame({'Feature': X.columns, 'Mutual Information': mi})
        mi_df.sort_values(by='Mutual Information', ascending=False, inplace=True)
        self.results['mutual_information'] = mi_df
        
        plt.figure(figsize=(12, 8))
        sns.barplot(data=mi_df, x='Mutual Information', y='Feature')
        plt.title('Mutual Information')
        plt.show()

    def statistical_tests(self):
        X = self.df.drop(columns=[self.target])
        y = self.df[self.target]
        
        chi2_results = []
        anova_results = []

        for column in X.columns:
            if self.df[column].dtype == 'object':
                crosstab = pd.crosstab(self.df[column], y)
                chi2, p, _, _ = chi2_contingency(crosstab)
                chi2_results.append((column, p))
            else:
                unique_classes = y.unique()
                group_data = [self.df[self.df[self.target] == cls][column] for cls in unique_classes]
                f_stat, p = f_oneway(*group_data)
                anova_results.append((column, p))

        chi2_df = pd.DataFrame(chi2_results, columns=['Feature', 'p-value'])
        anova_df = pd.DataFrame(anova_results, columns=['Feature', 'p-value'])

        self.results['chi2_tests'] = chi2_df
        self.results['anova_tests'] = anova_df
        
        print("Chi-squared Test Results (Categorical Features):")
        print(chi2_df)
        print("\nANOVA Test Results (Numerical Features):")
        print(anova_df)

    def run_all(self):
        self.preprocess()
        self.descriptive_statistics()
        self.correlation_analysis()
        self.feature_importance()
        self.mutual_info()
        self.statistical_tests()

# Example usage
if __name__ == "__main__":
    # Sample data
    data = {
        'age': [25, 27, 29, 22, 32, 31, 28],
        'salary': [50000, 54000, 58000, 60000, 62000, 57000, 55000],
        'department': ['HR', 'Finance', 'IT', 'HR', 'Finance', 'IT', 'HR'],
        'target': [0, 1, 0, 1, 0, 1, 0]
    }
    df = pd.DataFrame(data)
    
    selector = FeatureSelector(df, target='target', problem_type='classification')
    selector.run_all()

    # Access results
    print("\nResults:")
    for key, value in selector.results.items():
        print(f"\n{key.capitalize()}:\n{value}")
