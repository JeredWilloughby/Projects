# Step 1: Import necessary libraries
import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score, confusion_matrix, classification_report
from sklearn.datasets import make_classification

# Step 2: Generate synthetic dataset
def generate_synthetic_data(n_samples=1000):
    X, y = make_classification(n_samples=n_samples, n_features=5, n_informative=3, n_redundant=2, random_state=42)
    df = pd.DataFrame(X, columns=['education_level', 'years_experience', 'relevant_skills', 'interview_score', 'previous_job_performance'])
    df['hired'] = y
    return df

df = generate_synthetic_data()

# Step 3: Preprocess data and split into training and testing sets
features = df[['education_level', 'years_experience', 'relevant_skills', 'interview_score', 'previous_job_performance']]
target = df['hired']
X_train, X_test, y_train, y_test = train_test_split(features, target, test_size=0.2, random_state=42)

# Step 4: Train the RandomForestClassifier model
model = RandomForestClassifier(n_estimators=100, random_state=42)
model.fit(X_train, y_train)

# Step 5: Evaluate the model
y_pred = model.predict(X_test)
accuracy = accuracy_score(y_test, y_pred)
conf_matrix = confusion_matrix(y_test, y_pred)
class_report = classification_report(y_test, y_pred)

print(f"Model Accuracy: {accuracy * 100:.2f}%")
print("Confusion Matrix:")
print(conf_matrix)
print("Classification Report:")
print(class_report)

# Step 6: Feature importance analysis
feature_importances = pd.Series(model.feature_importances_, index=features.columns).sort_values(ascending=False)
print("Feature Importances:")
print(feature_importances)
