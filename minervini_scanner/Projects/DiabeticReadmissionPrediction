import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score, precision_score, recall_score, roc_auc_score

# Simulating a dataset
np.random.seed(42)
data_size = 1000

# Features: Age, Length of Stay, Number of Hospital Visits, Blood Sugar Level, HbA1c, Cholesterol
age = np.random.randint(20, 90, data_size)
length_of_stay = np.random.randint(1, 15, data_size)
hospital_visits = np.random.randint(0, 10, data_size)
blood_sugar = np.random.randint(70, 200, data_size)
HbA1c = np.random.uniform(5, 8, data_size)
cholesterol = np.random.randint(100, 250, data_size)

# Target: Readmission within 30 days (0 = No, 1 = Yes)
# Assuming older patients with higher HbA1c are more likely to be readmitted
readmission = (age > 50) & (HbA1c > 7)
readmission = readmission.astype(int)

# Creating a DataFrame
df = pd.DataFrame({
    'Age': age,
    'Length_of_Stay': length_of_stay,
    'Hospital_Visits': hospital_visits,
    'Blood_Sugar': blood_sugar,
    'HbA1c': HbA1c,
    'Cholesterol': cholesterol,
    'Readmission': readmission
})

# Splitting the dataset into training and testing sets
X = df.drop('Readmission', axis=1)
y = df['Readmission']

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Standardizing the features
scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled = scaler.transform(X_test)

# Building a logistic regression model
log_reg = LogisticRegression()
log_reg.fit(X_train_scaled, y_train)

# Predicting on the test set
y_pred = log_reg.predict(X_test_scaled)

# Evaluating the model
accuracy = accuracy_score(y_test, y_pred)
precision = precision_score(y_test, y_pred)
recall = recall_score(y_test, y_pred)
roc_auc = roc_auc_score(y_test, y_pred)

accuracy, precision, recall, roc_auc
