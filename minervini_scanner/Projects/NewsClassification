import nltk
from sklearn.datasets import fetch_20newsgroups
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.naive_bayes import MultinomialNB
from sklearn.pipeline import make_pipeline
from sklearn.model_selection import train_test_split
from sklearn import metrics

# Download NLTK data
nltk.download('stopwords')
from nltk.corpus import stopwords

# Load the dataset
data = fetch_20newsgroups()

# Preprocess the data
stop_words = stopwords.words('english')

def preprocess(text):
    # Convert to lowercase
    text = text.lower()
    # Remove stop words
    text = ' '.join(word for word in text.split() if word not in stop_words)
    return text

def preprocess_data(texts):
    return [preprocess(text) for text in texts]

# Apply preprocessing to the data
data.data = preprocess_data(data.data)

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(data.data, data.target, test_size=0.2, random_state=42)

# Build the NLP model pipeline
model = make_pipeline(TfidfVectorizer(), MultinomialNB())

# Train the model
model.fit(X_train, y_train)

# Evaluate the model
y_pred = model.predict(X_test)
accuracy = metrics.accuracy_score(y_test, y_pred)
print(f'Accuracy: {accuracy * 100:.2f}%')

print(metrics.classification_report(y_test, y_pred, target_names=data.target_names))

def classify_new_data(model, new_data):
    # Preprocess the new data
    preprocessed_data = preprocess_data(new_data)
    # Predict the categories
    predictions = model.predict(preprocessed_data)
    # Map predictions to category names
    predicted_categories = [data.target_names[pred] for pred in predictions]
    return predicted_categories

# Example new data - this can be replaced with a method to scrape websites of interest.
new_data = [
    "The space shuttle launched successfully.",
    "The stock market saw a significant increase today.",
    "A new species of bird was discovered in the Amazon rainforest."
]

# Classify the new data
classified_categories = classify_new_data(model, new_data)
print(classified_categories)
