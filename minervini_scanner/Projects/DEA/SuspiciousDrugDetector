import pandas as pd
import re
from sklearn.model_selection import train_test_split
from sklearn.feature_extraction.text import CountVectorizer
from sklearn.linear_model import LogisticRegression
from sklearn.pipeline import Pipeline
from sklearn.metrics import classification_report

# Updated dataset
data = {
    'text': [
        "Hey, do you have any China White?", 
        "Want to catch a movie tonight?", 
        "I just got some Blue Dolphin. You in?", 
        "Need some Green Crack. You got any?", 
        "Let's meet for coffee tomorrow morning.", 
        "Got any Bars?", 
        "Looking for some Boomers. Can you hook me up?",
        "Can you score me some blow for the party?"
    ],
    'suspicious': [1, 0, 1, 1, 0, 1, 1, 1],
    'drug': ["fentanyl", "none", "fentanyl", "marijuana", "none", "alprazolam", "psilocybin mushrooms", "cocaine"]
}

df = pd.DataFrame(data)

# Preprocessing
def preprocess_text(text):
    text = re.sub(r'\d+', '', text)  # Remove numbers
    text = re.sub(r'[^\w\s]', '', text)  # Remove punctuation
    text = text.lower()  # Lowercase
    return text

df['text'] = df['text'].apply(preprocess_text)

# Split data for suspicious classification
X = df['text']
y_suspicious = df['suspicious']

X_train, X_test, y_train, y_test = train_test_split(X, y_suspicious, test_size=0.2, random_state=42)

# Create a pipeline for vectorization and classification with class weights
pipeline = Pipeline([
    ('vectorizer', CountVectorizer()),
    ('classifier', LogisticRegression(class_weight='balanced'))
])

# Train the model
pipeline.fit(X_train, y_train)

# Predict and evaluate suspicious classification
y_pred_suspicious = pipeline.predict(X_test)
print("Suspicious Classification Report:")
print(classification_report(y_test, y_pred_suspicious, zero_division=0))

# List of slang terms for various drugs
drug_slang = {
    'fentanyl': [
        "apache", "birria", "blonde", "blue diamond", "blue dolphin", "blues", "butter", "china girl",
        "china town", "china white", "chinese", "chinese buffet", "chinese food", "crazy", "crazy one",
        "dance fever", "dragon", "dragon’s breath", "f", "food", "freddy", "fuf", "facebook", "fent",
        "fenty", "fire", "friend", "girl", "goodfella", "great bear", "gray stuff", "he-man", "heineken",
        "huerfanito", "humid", "jackpot", "king ivory", "lollipop", "murder 8", "nal", "nil", "nyl",
        "opes", "pharmacy", "poison", "shoes", "snowflake", "tango and cash", "tnt", "toe tag dope",
        "white girl", "white ladies"
    ],
    'cocaine': [
        "7", "62", "77", "777", "921", "a-1", "adidas", "all-american drug", "ancla", "angel powder", "angie",
        "animals", "apache", "apodo", "arriba", "audi", "aunt nora", "azucar", "baby powder", "barrato", "basuco",
        "bazooka", "beach", "belushi", "bernice", "bernie’s flakes", "bernie’s gold dust", "big bird", "big bloke",
        "big c", "big flake", "big rush", "billie hoke", "bird", "birdie powder", "blanca nieves", "blanco", "blast",
        "blizzard", "blonde", "blocks", "blow", "bmw", "board", "bobo", "bolitas", "bolivian marching powder",
        "bombita", "booger sugar", "bose", "bouncing powder", "brisa", "bump", "c-dust", "caballo", "caca",
        "cadillac", "california pancakes", "calves", "canelon", "candy", "car", "carney", "carrie nation", "cars",
        "case", "cebolla", "cecil", "cement", "charlie", "chevy", "cheyenne", "chica", "chicanitas", "chinos", "chiva",
        "cielo", "clear kind", "clear tires", "coca", "coca-cola", "cocazo", "coconut", "coke", "cola", "colorado",
        "comida", "comida dulce", "connie", "cookie", "cosa", "coso", "cosos", "crow", "crusty treats", "cuadro",
        "death valley", "designer jeans", "devil’s dandruff", "diamonds", "diente", "dienton", "diesel", "diosa blanca",
        "dona blanca", "double bubble", "double letters", "dove", "dream", "dulces", "duracell", "durazno", "duro",
        "dust", "escama", "escorpino", "falopa", "fef1", "fichas", "fiesta", "fire", "fish", "fish scale", "flake",
        "flea market jeans", "florida snow", "flour", "food", "foolish powder", "fox", "freeze", "friskie powder",
        "frula", "funtime", "gabacho", "galaxy", "gallos", "gato", "gift of the sun", "gin", "girl", "girlfriend", "glad stuff",
        "gold dust", "green gold", "gringa", "gringito", "grout", "guerillo", "gueros", "guitar", "h1", "hai hit", "hamburger",
        "happy dust", "happy powder", "happy trails", "heaven", "heaven dust", "heavy one", "hen", "henry viii", "hh",
        "hhj", "high heat", "hmh", "hooter", "hundai", "hunter", "ice cream", "icing", "inca message", "izzy", "jam",
        "jaime blanco", "jaula", "jeep", "jelly", "john deere", "joy flakes", "joy powder", "juguetes", "jump rope", "junk",
        "k13", "king’s habit", "kordell", "la familia", "lady", "lady snow", "late night", "lavada", "leaf", "libreta", "line",
        "loaf", "love affair", "lv", "maca flour", "madera", "mama coca", "mandango", "manita", "maradona", "marbol",
        "material", "mayback", "mayo", "melcocha", "media lata", "mercedes", "milk", "milonga", "mojo", "mona lisa",
        "monte", "morro", "mosquitos", "movie star drug", "muchacha", "muebles", "mujer", "napkin", "nieve", "niña",
        "normal", "nose candy", "nose powder", "old lady", "oyster stew", "paint", "paloma", "paleta", "palomos", "pantalones",
        "papas", "paradise", "paradise white", "parrot", "pearl", "pedrito", "perico", "personal", "peruvian", "peruvian flake",
        "peruvian lady", "pescado", "peta", "pez", "pichicata", "pillow", "pimp", "pingas", "pingos", "pintura blanca", "poli",
        "pollo", "polvo", "polvo de alegria", "polvo de estrellas", "polvo feliz", "poppy", "powder", "powder diamonds", "puma",
        "puritain", "quadros", "queso blanco", "racehorse charlie", "rambo", "refresco", "refrescas", "regular kind",
        "regular work", "reindeer dust", "richie", "rims", "rocky mountain", "rolex", "rolex hh", "rooster", "scale",
        "schmeck", "schoolboy", "scorpion", "scottie", "seed", "serpico", "sierra", "shirt", "ski equipment", "sleigh ride",
        "sneeze", "sniff", "snow", "snow bird", "snow cone", "snow white", "snowball", "snowflake", "society high", "soda",
        "soditas", "soft", "space", "special", "speedball", "stardust", "star spangled powder", "studio fuel", "suave", "sugar",
        "superman", "sweet stuff", "tabique", "tablas", "talco", "talquito", "tamales", "taxi", "tecate", "teenager", "teeth",
        "tequila", "thunder", "tire", "tonto", "toot", "tortes", "tortuga", "toyota", "t-shirts", "tubo", "tucibi", "turkey",
        "tutti-frutti", "vaquita", "wash", "wet", "whack", "white", "white bitch", "white cross", "white dove", "white girl",
        "white goat", "white horse", "white lady", "white mercedes benz", "white mosquito", "white paint", "white powder",
        "white rock", "white root", "white shirt", "white t", "white wall tires", "whitey", "whiz bang", "wings", "wooly",
        "work", "yayo", "yeyo", "yoda", "zapato", "zip"
    ]
}

# Function to identify drug slang and predict the drug
def identify_drug(text):
    tokens = text.split()
    identified_drugs = []
    for drug, slang_terms in drug_slang.items():
        if any(word in tokens for word in slang_terms):
            identified_drugs.append(drug)
    return identified_drugs if identified_drugs else ["none"]

# Function to classify a new text and identify drugs
def classify_and_identify_drugs(text):
    preprocessed_text = preprocess_text(text)
    is_suspicious = pipeline.predict([preprocessed_text])[0]
    drugs_mentioned = identify_drug(preprocessed_text)
    return {
        "text": text,
        "suspicious": bool(is_suspicious),
        "drugs_mentioned": drugs_mentioned if drugs_mentioned != ["none"] else []
    }

# Test with new texts
new_texts = [
    "Got some Blue Diamond and need a bit of blow for the party",
    "Let's meet for coffee",
    "Can you get me some Fent and Yayo?"
]

results = [classify_and_identify_drugs(text) for text in new_texts]

for result in results:
    print(result)
