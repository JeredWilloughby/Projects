import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import classification_report, confusion_matrix, roc_auc_score
import matplotlib.pyplot as plt
import seaborn as sns

# Load data
def load_data(filepath):
    return pd.read_csv(filepath)

# Preprocess data
def preprocess_data(data):
    # Assume data is already scaled and encoded as required
    # Handle missing values if necessary
    data.fillna(data.median(), inplace=True)
    return data

# Split data into features and target
def split_data(data):
    X = data.drop('Class', axis=1)  # Assuming 'Class' is the target column for fraud labels
    y = data['Class']
    return X, y

# Split data into training and testing sets
def create_train_test_split(X, y):
    return train_test_split(X, y, test_size=0.3, random_state=42, stratify=y)

# Train the model
def train_model(X_train, y_train):
    model = RandomForestClassifier(n_estimators=100, random_state=42)
    model.fit(X_train, y_train)
    return model

# Evaluate the model
def evaluate_model(model, X_test, y_test):
    y_pred = model.predict(X_test)
    print("Confusion Matrix:")
    print(confusion_matrix(y_test, y_pred))
    print("\nClassification Report:")
    print(classification_report(y_test, y_pred))
    print("ROC AUC Score:", roc_auc_score(y_test, model.predict_proba(X_test)[:, 1]))

# Main function
def main():
    data = load_data('path_to_your_data.csv')
    data = preprocess_data(data)
    X, y = split_data(data)
    X_train, X_test, y_train, y_test = create_train_test_split(X, y)
    model = train_model(X_train, y_train)
    evaluate_model(model, X_test, y_test)

if __name__ == "__main__":
    main()
